Te explico los conceptos fundamentales de entrada y salida de datos en Python de forma clara y estructurada:
La entrada y salida de datos (I/O - Input/Output) es fundamental en programación pues nos permite que nuestros programas interactúen con el usuario y con archivos.
ENTRADA DE DATOS:

La entrada básica se hace con la función input()
Siempre devuelve texto (cadena), incluso si el usuario escribe números
Para obtener números, debemos convertir la entrada usando int() o float()
Podemos mostrar un mensaje al usuario dentro del input() para guiarlo

SALIDA DE DATOS:

La función print() es la principal forma de mostrar información:

Muestra texto y variables en la pantalla
Puede mostrar múltiples elementos separándolos con comas
Por defecto añade un salto de línea al final
Podemos personalizar el separador y el final.


Formato de texto:

Cuerdas fa: La forma más moderna y clara. Usando f"texto {variable}"
.format(): Método más tradicional
%: Estilo antiguo pero aún funcional



TRABAJO CON ARCHIVOS:

Lectura:

Podemos leer archivos completos en línea por línea
Siempre es mejor usar 'with' para manejar archivos
El modo 'r' es para lectura


Escritura:

Modo 'w' para escribir (borra contenido anterior)
Modo 'a' para añadir al final
También usamos 'with' para asegurar que el archivo se cierre correctamente



MANEJO DE ERRORES:

Es importante manejar errores en la entrada de datos.
Los errores más comunes son:

ValueError: cuando la conversión de tipos falla
FileNotFoundError: cuando el archivo no existe
PermissionError: cuando no hay permisos suficientes



BUENAS PRÁCTICAS:

Siempre validar la entrada del usuario
Usar 'with' para manejar archivos
Implementar gestión de errores
Dar retroalimentación clara al usuario
Documentar el código adecuadamente

El dominio de la entrada/salida es crucial porque:

Permite crear programas interactivos
Facilitar el almacenamiento de datos
Mejora la experiencia del usuario
Hace los programas más robustos y profesionales

1. Entrada de datos (Input)
La función principal para obtener entrada del usuario es input(). Siempre devuelve una cuerda.
nombre = input("¿Cómo te llamas? ")  # El texto entre paréntesis es el prompt
edad = input("¿Cuál es tu edad? ")    # edad será un string, no un número

Conversión de tipos
Es importante convertir la entrada al tipo de dato que necesitamos:

# Convertir a entero
edad = int(input("¿Cuál es tu edad? "))

# Convertir a float
altura = float(input("¿Cuál es tu altura en metros? "))

# Convertir a boolean
respuesta = bool(input("¿Estás de acuerdo? (True/False) "))

2. Salida de Datos
Función print()
La función print()es la forma más básica de mostrar información:

# Impresión básica
print("Hola mundo")

# Múltiples argumentos
nombre = "Ana"
edad = 25
print("Nombre:", nombre, "Edad:", edad)  # Los separará automáticamente con espacios

# Uso de end para cambiar el final (por defecto es \n)
print("Hola", end=" ")
print("mundo")  # Imprime: Hola mundo

# Uso de sep para cambiar el separador
print("Python", "es", "genial", sep="-")  # Imprime: Python-es-genial

Formato de cadenas
1. f-strings (Python 3.6+) - Método recomendado

nombre = "Juan"
edad = 30
print(f"Me llamo {nombre} y tengo {edad} años")

# Con formateo de números
precio = 19.99
print(f"El precio es: ${precio:.2f}")  # Dos decimales

2. Método .format()

nombre = "María"
edad = 25
print("Me llamo {} y tengo {} años".format(nombre, edad))

# Con posiciones específicas
print("{1} tiene {0} años".format(edad, nombre))

# Con nombres
print("{n} tiene {e} años".format(n=nombre, e=edad))
nombre = "Pedro"
edad = 40
print("Me llamo %s y tengo %d años" % (nombre, edad))

3. Manejo de Archivos
Lectura de archivos

# Método 1: with (recomendado)
with open('archivo.txt', 'r') as archivo:
    contenido = archivo.read()  # Lee todo el archivo
    
with open('archivo.txt', 'r') as archivo:
    lineas = archivo.readlines()  # Lee línea por línea

# Método 2: lectura línea por línea
with open('archivo.txt', 'r') as archivo:
    for linea in archivo:
        print(linea.strip())  # strip() elimina espacios y saltos de línea


Escritura de archivos

# Escribir en un archivo (sobrescribe)
with open('nuevo.txt', 'w') as archivo:
    archivo.write("Hola mundo\n")
    archivo.write("Segunda línea")

# Añadir a un archivo (append)
with open('nuevo.txt', 'a') as archivo:
    archivo.write("\nTercera línea")



4. Manejo de errores en E/S
# Manejo básico de errores
try:
    edad = int(input("Ingresa tu edad: "))
except ValueError:
    print("Por favor, ingresa un número válido")

# Manejo de archivos con try-except
try:
    with open('archivo.txt', 'r') as archivo:
        contenido = archivo.read()
except FileNotFoundError:
    print("El archivo no existe")
except PermissionError:
    print("No tienes permiso para leer el archivo")

5. Ejercicios prácticos

Crea un programa que pida nombre y edad, y los guarde en un archivo:

def registrar_usuario():
    nombre = input("Nombre: ")
    try:
        edad = int(input("Edad: "))
        with open('usuarios.txt', 'a') as archivo:
            archivo.write(f"{nombre},{edad}\n")
        print("Usuario registrado con éxito")
    except ValueError:
        print("Error: La edad debe ser un número")

Programa que lee y muestra el contenido de un archivo:

def mostrar_usuarios():
    try:
        with open('usuarios.txt', 'r') as archivo:
            for linea in archivo:
                nombre, edad = linea.strip().split(',')
                print(f"Usuario: {nombre}, Edad: {edad}")
    except FileNotFoundError:
        print("El archivo de usuarios no existe")

    